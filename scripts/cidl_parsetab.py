
# cidl_parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACHAR BOOL COMMA CONST ECHAR EQUALS FLOAT HEX IDENT INT LBRACKET LPAREN OCT PCHAR RBRACKET RPAREN SEMICOLON STRING UCHARtext :\n            | codecode : stat SEMICOLON\n            | stat SEMICOLON codestat : decldecl : constdecl\n            | funcdeclconstdecl : CONST typename IDENT EQUALS constexprconstexpr : number\n                 | bool\n                 | char\n                 | string\n                 | constrefnumber : dec\n              | oct\n              | hex\n              | floatdec : INToct : OCThex : HEXfloat : FLOATchar : pchar\n            | echar\n            | achar\n            | uchar pchar : PCHARechar : ECHARachar : ACHARuchar : UCHARbool : BOOLstring : STRINGconstref : IDENTfuncdecl :       typename IDENT params\n                | attrs typename IDENT paramsattrs : LBRACKET attrlist RBRACKETattrlist : attr\n                | attr COMMA attrlistattr : IDENT\n            | IDENT LPAREN constexpr RPARENparams : LPAREN paramlist RPARENparamlist :\n                 | param\n                 | param COMMA paramlistparam :       typename IDENT\n             |       typename IDENT EQUALS constexpr\n             | attrs typename IDENT\n             | attrs typename IDENT EQUALS constexprtypename : IDENT'
    
_lr_action_items = {'PCHAR':([22,27,66,69,],[40,40,40,40,]),'IDENT':([0,4,7,8,9,10,12,13,18,21,22,23,24,27,55,56,61,63,66,69,],[9,9,15,17,-48,9,9,20,26,-35,41,15,9,41,62,9,9,67,41,41,]),'CONST':([0,12,],[4,4,]),'STRING':([22,27,66,69,],[33,33,33,33,]),'SEMICOLON':([1,2,6,11,25,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,58,59,64,],[-5,12,-7,-6,-33,-17,-9,-11,-28,-19,-31,-25,-16,-10,-23,-24,-15,-26,-32,-12,-29,-20,-27,-22,-18,-21,-13,-30,-14,-34,-8,-40,]),'INT':([22,27,66,69,],[48,48,48,48,]),'RPAREN':([24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,57,61,62,65,67,68,70,],[-41,-17,-9,-11,-28,-19,-31,-25,-16,-10,-23,-24,-15,-26,-32,-12,-29,-20,60,-27,-22,-18,-21,-13,-30,-14,-42,64,-41,-44,-43,-46,-45,-47,]),'FLOAT':([22,27,66,69,],[49,49,49,49,]),'HEX':([22,27,66,69,],[44,44,44,44,]),'EQUALS':([20,62,67,],[27,66,69,]),'LBRACKET':([0,12,24,61,],[7,7,7,7,]),'UCHAR':([22,27,66,69,],[43,43,43,43,]),'COMMA':([15,16,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,54,60,62,67,68,70,],[-38,23,-17,-9,-11,-28,-19,-31,-25,-16,-10,-23,-24,-15,-26,-32,-12,-29,-20,-27,-22,-18,-21,-13,-30,-14,61,-39,-44,-46,-45,-47,]),'LPAREN':([15,17,26,],[22,24,24,]),'ECHAR':([22,27,66,69,],[46,46,46,46,]),'BOOL':([22,27,66,69,],[51,51,51,51,]),'RBRACKET':([14,15,16,53,60,],[21,-38,-36,-37,-39,]),'ACHAR':([22,27,66,69,],[31,31,31,31,]),'OCT':([22,27,66,69,],[32,32,32,32,]),'$end':([0,3,5,12,19,],[-1,-2,0,-3,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'decl':([0,12,],[1,1,]),'code':([0,12,],[3,19,]),'text':([0,],[5,]),'float':([22,27,66,69,],[28,28,28,28,]),'number':([22,27,66,69,],[29,29,29,29,]),'char':([22,27,66,69,],[30,30,30,30,]),'attrs':([0,12,24,61,],[10,10,56,56,]),'uchar':([22,27,66,69,],[34,34,34,34,]),'hex':([22,27,66,69,],[35,35,35,35,]),'param':([24,61,],[54,54,]),'params':([17,26,],[25,58,]),'echar':([22,27,66,69,],[37,37,37,37,]),'bool':([22,27,66,69,],[36,36,36,36,]),'constdecl':([0,12,],[11,11,]),'oct':([22,27,66,69,],[39,39,39,39,]),'attrlist':([7,23,],[14,53,]),'stat':([0,12,],[2,2,]),'string':([22,27,66,69,],[42,42,42,42,]),'constexpr':([22,27,66,69,],[45,59,68,70,]),'paramlist':([24,61,],[57,65,]),'pchar':([22,27,66,69,],[47,47,47,47,]),'attr':([7,23,],[16,16,]),'achar':([22,27,66,69,],[38,38,38,38,]),'funcdecl':([0,12,],[6,6,]),'constref':([22,27,66,69,],[50,50,50,50,]),'typename':([0,4,10,12,24,56,61,],[8,13,18,8,55,63,55,]),'dec':([22,27,66,69,],[52,52,52,52,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> text","S'",1,None,None,None),
  ('text -> <empty>','text',0,'p_text','cidl.py',449),
  ('text -> code','text',1,'p_text','cidl.py',450),
  ('code -> stat SEMICOLON','code',2,'p_code','cidl.py',453),
  ('code -> stat SEMICOLON code','code',3,'p_code','cidl.py',454),
  ('stat -> decl','stat',1,'p_stat','cidl.py',457),
  ('decl -> constdecl','decl',1,'p_decl','cidl.py',460),
  ('decl -> funcdecl','decl',1,'p_decl','cidl.py',461),
  ('constdecl -> CONST typename IDENT EQUALS constexpr','constdecl',5,'p_constdecl','cidl.py',464),
  ('constexpr -> number','constexpr',1,'p_constexpr','cidl.py',469),
  ('constexpr -> bool','constexpr',1,'p_constexpr','cidl.py',470),
  ('constexpr -> char','constexpr',1,'p_constexpr','cidl.py',471),
  ('constexpr -> string','constexpr',1,'p_constexpr','cidl.py',472),
  ('constexpr -> constref','constexpr',1,'p_constexpr','cidl.py',473),
  ('number -> dec','number',1,'p_int','cidl.py',477),
  ('number -> oct','number',1,'p_int','cidl.py',478),
  ('number -> hex','number',1,'p_int','cidl.py',479),
  ('number -> float','number',1,'p_int','cidl.py',480),
  ('dec -> INT','dec',1,'p_dec','cidl.py',484),
  ('oct -> OCT','oct',1,'p_oct','cidl.py',488),
  ('hex -> HEX','hex',1,'p_hex','cidl.py',492),
  ('float -> FLOAT','float',1,'p_float','cidl.py',496),
  ('char -> pchar','char',1,'p_char','cidl.py',500),
  ('char -> echar','char',1,'p_char','cidl.py',501),
  ('char -> achar','char',1,'p_char','cidl.py',502),
  ('char -> uchar','char',1,'p_char','cidl.py',503),
  ('pchar -> PCHAR','pchar',1,'p_pchar','cidl.py',507),
  ('echar -> ECHAR','echar',1,'p_echar','cidl.py',511),
  ('achar -> ACHAR','achar',1,'p_achar','cidl.py',515),
  ('uchar -> UCHAR','uchar',1,'p_uchar','cidl.py',519),
  ('bool -> BOOL','bool',1,'p_bool','cidl.py',523),
  ('string -> STRING','string',1,'p_string','cidl.py',527),
  ('constref -> IDENT','constref',1,'p_constref','cidl.py',531),
  ('funcdecl -> typename IDENT params','funcdecl',3,'p_funcdecl','cidl.py',537),
  ('funcdecl -> attrs typename IDENT params','funcdecl',4,'p_funcdecl','cidl.py',538),
  ('attrs -> LBRACKET attrlist RBRACKET','attrs',3,'p_attrs','cidl.py',546),
  ('attrlist -> attr','attrlist',1,'p_attrlist','cidl.py',551),
  ('attrlist -> attr COMMA attrlist','attrlist',3,'p_attrlist','cidl.py',552),
  ('attr -> IDENT','attr',1,'p_attr','cidl.py',556),
  ('attr -> IDENT LPAREN constexpr RPAREN','attr',4,'p_attr','cidl.py',557),
  ('params -> LPAREN paramlist RPAREN','params',3,'p_params','cidl.py',565),
  ('paramlist -> <empty>','paramlist',0,'p_paramlist','cidl.py',570),
  ('paramlist -> param','paramlist',1,'p_paramlist','cidl.py',571),
  ('paramlist -> param COMMA paramlist','paramlist',3,'p_paramlist','cidl.py',572),
  ('param -> typename IDENT','param',2,'p_param','cidl.py',576),
  ('param -> typename IDENT EQUALS constexpr','param',4,'p_param','cidl.py',577),
  ('param -> attrs typename IDENT','param',3,'p_param','cidl.py',578),
  ('param -> attrs typename IDENT EQUALS constexpr','param',5,'p_param','cidl.py',579),
  ('typename -> IDENT','typename',1,'p_typename','cidl.py',591),
]
